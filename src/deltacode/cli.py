#
#  Copyright (c) 2017 nexB Inc. and others. All rights reserved.
#
from __future__ import absolute_import

import csv
import json

import click

from deltacode import DeltaCode


def generate_csv(data, result_file):
    """
    Using the OrderedDict generated by DeltaCode.to_dict(), create a .csv file
    containing the primary information from the Delta objects.
    """
    category = ''
    path = ''

    tuple = ()
    tuple_list = []
    deltas = data

    for delta in deltas:
        category = delta
        for f in deltas[delta]:
            category = f['category']
            path = f['path']
            tuple = (category, path)
            tuple_list.append(tuple)

    with open(result_file, 'wb') as out:
        csv_out = csv.writer(out)
        csv_out.writerow(['Type of delta', 'Path'])
        for row in tuple_list:
            csv_out.writerow(row)


def generate_json(data, result_file):
    """
    Using the OrderedDict generated by DeltaCode.to_dict(), create a .json file
    containing the primary information from the Delta objects.
    """
    # TODO: Add json file headers here
    with open(result_file, 'w') as outfile:
        json.dump(data, outfile, indent=4)


@click.command()
@click.help_option('-h', '--help')
@click.option('-n', '--new', required=True, prompt=False, type=click.Path(exists=True, readable=True), help='Identify the path to the "new" scan file')
@click.option('-o', '--old', required=True, prompt=False, type=click.Path(exists=True, readable=True), help='Identify the path to the "old" scan file')
@click.option('-c', '--csv-file', prompt=False, type=click.Path(exists=False), help='Identify the path to the .csv output file')
@click.option('-j', '--json-file', prompt=False, type=click.Path(exists=False), help='Identify the path to the .json output file')
def cli(new, old, csv_file, json_file):
    """
    This script identifies the changes that need to be made to the 'old'
    scan file (-o or -old) in order to generate the 'new' scan file (-n or
    -new).  The results are written to a .csv file (-c or -csv-file) or a
    .json file (-j or -json-file) at a user-designated location.  If no file
    option is selected, the JSON results are printed to the console.
    """

    # do the delta
    delta = DeltaCode(new, old)
    data = delta.to_dict()


    # output to csv
    if csv_file:
        generate_csv(data, csv_file)
    # generate JSON output
    elif json_file:
        generate_json(data, json_file)
    # print to stdout
    else:
        print(json.dumps(data, indent=4))

    # for key in delta.deltas:
    #     print('\nkey in delta.deltas = {}\n'. format(key))
    #     print('\ndelta.deltas[key] = {}\n'. format(delta.deltas[key]))
    #     for value in delta.deltas[key]:
    #         print('\n+++++\n')
    #         print('\nvalue = \n\n{}\n'.format(value))
    #         print('\nvalue.new_file = \n\n{}\n'.format(value.new_file))
    #         print('\nvalue.old_file = \n\n{}\n'.format(value.old_file))
    #         print('\nvalue.category = \n\n{}\n'.format(value.category))
    #         print('\nvalue.to_dict() = \n\n{}\n'.format(value.to_dict()))
    #         print('\n+++++\n')

    # print(delta.deltas)
    # for key in delta.deltas:
    #     for value in delta.deltas[key]:
    #         print('=====================================')
    #         print(value.to_dict())
